{
  "openapi": "3.0.1",
  "info": {
    "title": "MARO - интерактивная карта с персонализированными маршрутами",
    "description": "Документация по использованию MARO. Для обращения к SignalR использовать: /api/maps",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Аутентификация пользователя",
        "description": "Выдача токена доступа и, если \"запомнить меня\" = true, выдача токена обновления. Пример запроса:\r\n\r\n    POST: /api/auth/login\r\n    {\r\n        \"arg\": \"user@example.com\" (или \"71234567890\"),\r\n        \"password\": \"Abcd_123\",\r\n        \"rememberMe\": true,\r\n        \"returnUrl\": \"http://example.com/catalog\"\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Неудачная попытка входа",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Аккаунт заблокирован",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Пользователь не найден",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Регистрация пользователя",
        "description": "Пароль должен состоять не менее чем из 8 символов, содержать буквенно-цифровые символы и символы в верхнем регистре.\r\nКлиент должен обязательно содержать страницу \".../confirm\". Пример: http://example.com/confirm_email\r\nПример запроса:\r\n\r\n    POST: /api/auth/register\r\n    {\r\n        \"arg\": \"user@example.com\" (или \"71234567890\"),\r\n        \"password\": \"Abcd_123\",\r\n        \"host\": \"http://example.com\"\r\n        \"returnUrl\": \"http://example.com/catalog\"\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Роль не существует",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Что-то пошло не так",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/confirm": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Подтверждение аккаунта",
        "description": "Пример запроса:\r\n\r\n    POST: /api/auth/confirm\r\n    {\r\n        \"userId\": \"user@example.com\",\r\n        \"code\": \"your code\",\r\n        \"returnUrl\": \"http://example.com/catalog\"\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка подтверждения аккаунта",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Пользователь не найден",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/forgot_password": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Забыл пароль",
        "description": "Отправить код для сброса пароля.\r\nКлиент должен обязательно содержать страницу \".../reset-password \". Пример: http://example.com/reset_password \r\nПример запроса: \r\n\r\n    GET: /api/auth/forgot_password?arg=user@example.com&host=http://emxaple.com",
        "parameters": [
          {
            "name": "arg",
            "in": "query",
            "description": "Адрес электронной почты или номер телефона пользователя, на который будет отправлено письмо с кодом подтверждения",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "Хост клиента, с которого идёт запрос",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "400": {
            "description": "Если пользователь не существует или аккаунт заблокирован",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/reset_password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Сброс пароля",
        "description": "Проверяет код подтверждения и сбрасывает пароль. \r\nПример запроса:\r\n\r\n    POST: /api/auth/reset_password\r\n    {\r\n        \"arg\": \"user@example.com\",\r\n        \"code\": \"your code\",\r\n        \"password\": \"Abcd_123\"\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "400": {
            "description": "Ошибка сброса пароля",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Пользователь не найден",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/refresh_token": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Обновление токена обновления и доступа",
        "description": "Пример запроса:\r\n\r\n    PUT: /api/auth/refresh_token\r\n    {\r\n        \"access_token\": \"jwt token\",\r\n        \"refresh_token\": \"your refresh token\"\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Недействительный токен доступа или обновления",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/revoke/{userId}": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Отзыв токена обновления",
        "description": "Пример запроса:\r\n\r\n    DELETE: /api/auth/revoke/4C2C522E-F785-4EB4-8ED7-260861453330",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id пользователя, у которого нужно отозвать токен обновления",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "400": {
            "description": "Что-то пошло не так...",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Пользователь не найден",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/login_as_guest": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Войти как гость",
        "description": "Пример запроса:\r\n\r\n    POST: /api/auth/login_as_guest",
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginAsGuestResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginAsGuestResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginAsGuestResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Что-то пошло не так...",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Роль не найдена",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Group/create_group": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Создать группу пользователей",
        "description": "SignalR результат: \"Notify\". Пример запроса:\r\n\r\n    POST: /api/group/create_group\r\n    {\r\n        \"userId\": \"4C2C522E-F785-4EB4-8ED7-260861453330\",\r\n        \"host\": \"http://example.com\"\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "У пользователя уже есть группа",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Роль не найдена",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Group/join_group": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Присоединиться к существующей группе",
        "description": "SignalR результат: \"Notify\". Пример запроса:\r\n\r\n    POST: /api/group/join_group\r\n    {\r\n        \"userId\": \"4C2C522E-F785-4EB4-8ED7-260861453330\",\r\n        \"groupId\": \"4C2C522E-F785-4EB4-8ED7-260861453330\"\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinTheGroupDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinTheGroupDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JoinTheGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "400": {
            "description": "Поле UserId обязательно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Группа не найдена",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Group/delete_group/{groupId}": {
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Удалить группу",
        "description": "Пример запроса:\r\n\r\n    DELETE: /api/group/delete_group/4C2C522E-F785-4EB4-8ED7-260861453330",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "400": {
            "description": "Поле GroupId обязательно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Группа не найдена",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Group/group_details/{groupId}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Информация о группе",
        "description": "Пример запроса:\r\n\r\n    GET: /api/group/group_details/4C2C522E-F785-4EB4-8ED7-260861453330",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDetailsResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDetailsResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDetailsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Поле GroupId обязательно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Группа не найдена",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/Rate/add_rate": {
      "post": {
        "tags": [
          "Rate"
        ],
        "summary": "Добавление оценок мест для обучения рекомендательной модели",
        "description": "Оценка должна быть от 1 до 5 включительно.\r\nПример запроса:\r\n\r\n    POST: /api/rate/add_rate\r\n    {\r\n        \"userId\": \"4C2C522E-F785-4EB4-8ED7-260861453330\",\r\n        \"placeId\": \"B415AFB5-5DA4-485C-9EB0-A47A58A28731\",\r\n        \"rate\": 4\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddRateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "404": {
            "description": "Пользователь не найден",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Некооректная оценка",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/User/add_user_details/{userId}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Добавить информацию о пользователе",
        "description": "Добавляет имя, фамилию и возраст пользователя. Пример запроса:\r\n\r\n    POST: /api/user/add_user_details/4C2C522E-F785-4EB4-8ED7-260861453330\r\n    {\r\n        \"firstname\": \"Иван\",\r\n        \"lastname\": \"Петров\",\r\n        \"age\": 25\r\n    }",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "400": {
            "description": "Некорректные данные",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Пользователь не найден",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/User/update_items/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Обновить список пожеланий пользователя.",
        "description": "Добавляет пожелания пользователя. Id принимаются переведённые из бинарной системы в десятичную. Пример запроса:\r\n\r\n    PUT: /api/user/update_items/4C2C522E-F785-4EB4-8ED7-260861453330?itemIds=83",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemIds",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Удачно"
          },
          "400": {
            "description": "Переданы неверные Id пожеланий",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Пользователь не найден",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/User/user_details/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Получить информацию о пользователе",
        "description": "Выводит имя, фамилию, возраст, полное имя, контактную информацию, роль на сайте. Пример запроса:\r\n\r\n    GET: /api/user/user_details/4C2C522E-F785-4EB4-8ED7-260861453330",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Удачно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Поле UserId обязательно",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Роль не найдена",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddRateDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "placeId": {
            "type": "string",
            "nullable": true
          },
          "rate": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ConfirmDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfirmResponseModel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "host": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateGroupResponseModel": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "qrLink": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupDetailsResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "qrLink": {
            "type": "string",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JoinTheGroupDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "LoginAsGuestResponseModel": {
        "type": "object",
        "properties": {
          "guestId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "arg": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "rememberMe": {
            "type": "boolean"
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenExpires": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenDto": {
        "required": [
          "accessToken",
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "minLength": 1,
            "type": "string"
          },
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenResponseModel": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterDto": {
        "required": [
          "arg",
          "password"
        ],
        "type": "object",
        "properties": {
          "arg": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "host": {
            "type": "string",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordViewModel": {
        "required": [
          "arg",
          "code",
          "password"
        ],
        "type": "object",
        "properties": {
          "arg": {
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 8,
            "type": "string",
            "format": "password"
          }
        },
        "additionalProperties": false
      },
      "UserDetailsDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserDetailsResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "contact": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "groupRole": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Insert JWT with Bearer into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
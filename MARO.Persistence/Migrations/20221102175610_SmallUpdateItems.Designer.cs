// <auto-generated />
using System;
using System.Collections.Generic;
using MARO.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MARO.Persistence.Migrations
{
    [DbContext(typeof(MARODbContext))]
    [Migration("20221102175610_SmallUpdateItems")]
    partial class SmallUpdateItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MARO.Domain.Сharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<int>>("Ages")
                        .HasColumnType("integer[]");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CriterionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("UserId");

                    b.ToTable("Сharacteristics", (string)null);
                });

            modelBuilder.Entity("MARO.Domain.Criterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Criteria", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "wishes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "pastime"
                        },
                        new
                        {
                            Id = 3,
                            Name = "characteristics"
                        });
                });

            modelBuilder.Entity("MARO.Domain.CriterionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CriterionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("UserId");

                    b.ToTable("CriterionItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CriterionId = 1,
                            Name = "free"
                        },
                        new
                        {
                            Id = 2,
                            CriterionId = 1,
                            Name = "fee"
                        },
                        new
                        {
                            Id = 3,
                            CriterionId = 1,
                            Name = "walking"
                        },
                        new
                        {
                            Id = 4,
                            CriterionId = 1,
                            Name = "electrobus"
                        },
                        new
                        {
                            Id = 5,
                            CriterionId = 1,
                            Name = "more_people"
                        },
                        new
                        {
                            Id = 6,
                            CriterionId = 1,
                            Name = "less_people"
                        },
                        new
                        {
                            Id = 7,
                            CriterionId = 1,
                            Name = "street"
                        },
                        new
                        {
                            Id = 8,
                            CriterionId = 1,
                            Name = "room"
                        },
                        new
                        {
                            Id = 9,
                            CriterionId = 1,
                            Name = "limited_health"
                        },
                        new
                        {
                            Id = 10,
                            CriterionId = 2,
                            Name = "museums_permanentExhibits"
                        },
                        new
                        {
                            Id = 11,
                            CriterionId = 2,
                            Name = "museums_temporaryExhibits"
                        },
                        new
                        {
                            Id = 12,
                            CriterionId = 2,
                            Name = "museums_excursions"
                        },
                        new
                        {
                            Id = 13,
                            CriterionId = 2,
                            Name = "entertaining_festivals"
                        },
                        new
                        {
                            Id = 14,
                            CriterionId = 2,
                            Name = "entertaining_concerts"
                        },
                        new
                        {
                            Id = 15,
                            CriterionId = 2,
                            Name = "entertaining_attractions"
                        },
                        new
                        {
                            Id = 16,
                            CriterionId = 2,
                            Name = "educational_masterClasses"
                        },
                        new
                        {
                            Id = 17,
                            CriterionId = 2,
                            Name = "educational_lectures"
                        },
                        new
                        {
                            Id = 18,
                            CriterionId = 2,
                            Name = "sports_masterClasses"
                        },
                        new
                        {
                            Id = 19,
                            CriterionId = 2,
                            Name = "sports_races"
                        },
                        new
                        {
                            Id = 20,
                            CriterionId = 2,
                            Name = "gastronomic_festivals"
                        },
                        new
                        {
                            Id = 21,
                            CriterionId = 2,
                            Name = "business_expo"
                        },
                        new
                        {
                            Id = 22,
                            CriterionId = 2,
                            Name = "eating_cafe"
                        },
                        new
                        {
                            Id = 23,
                            CriterionId = 2,
                            Name = "eating_restaurant"
                        },
                        new
                        {
                            Id = 24,
                            CriterionId = 2,
                            Name = "eating_streetfood"
                        },
                        new
                        {
                            Id = 25,
                            CriterionId = 2,
                            Name = "walking_fountains"
                        },
                        new
                        {
                            Id = 26,
                            CriterionId = 2,
                            Name = "walking_rocket"
                        },
                        new
                        {
                            Id = 27,
                            CriterionId = 2,
                            Name = "walking_architecture"
                        },
                        new
                        {
                            Id = 28,
                            CriterionId = 2,
                            Name = "walking_ponds"
                        },
                        new
                        {
                            Id = 29,
                            CriterionId = 2,
                            Name = "walking_botanicalGarden"
                        },
                        new
                        {
                            Id = 30,
                            CriterionId = 2,
                            Name = "walking_infoCenter"
                        },
                        new
                        {
                            Id = 31,
                            CriterionId = 2,
                            Name = "walking_mothersRoom"
                        },
                        new
                        {
                            Id = 32,
                            CriterionId = 2,
                            Name = "walking_toilets"
                        },
                        new
                        {
                            Id = 33,
                            CriterionId = 2,
                            Name = "sports_periodicEvents"
                        });
                });

            modelBuilder.Entity("MARO.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("FullName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneConfirmationCode")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MARO.Domain.UserCriteria", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("CriterionId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CriterionId");

                    b.HasIndex("CriterionId");

                    b.ToTable("UserCriteria", (string)null);
                });

            modelBuilder.Entity("MARO.Domain.UserItem", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("CriterionItemId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CriterionItemId");

                    b.HasIndex("CriterionItemId");

                    b.ToTable("UserItems", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5234f114-4ab3-4c02-97f3-74a991160685",
                            ConcurrencyStamp = "909a8ffb-9234-4755-8a85-19e8f6d66192",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "442b043d-dce9-43b7-bbf9-df4b95776fcb",
                            ConcurrencyStamp = "75ca3528-041f-4115-ba81-dcf5c8add3d7",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MARO.Domain.Сharacteristic", b =>
                {
                    b.HasOne("MARO.Domain.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MARO.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MARO.Domain.CriterionItem", b =>
                {
                    b.HasOne("MARO.Domain.Criterion", "Criterion")
                        .WithMany("Children")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MARO.Domain.User", null)
                        .WithMany("CriterionItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Criterion");
                });

            modelBuilder.Entity("MARO.Domain.UserCriteria", b =>
                {
                    b.HasOne("MARO.Domain.Criterion", "Criterion")
                        .WithMany("UserCriteria")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MARO.Domain.User", "User")
                        .WithMany("UserCriteria")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MARO.Domain.UserItem", b =>
                {
                    b.HasOne("MARO.Domain.CriterionItem", "CriterionItem")
                        .WithMany("UserItems")
                        .HasForeignKey("CriterionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MARO.Domain.User", "User")
                        .WithMany("UserItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CriterionItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MARO.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MARO.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MARO.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MARO.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MARO.Domain.Criterion", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("UserCriteria");
                });

            modelBuilder.Entity("MARO.Domain.CriterionItem", b =>
                {
                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("MARO.Domain.User", b =>
                {
                    b.Navigation("CriterionItems");

                    b.Navigation("UserCriteria");

                    b.Navigation("UserItems");
                });
#pragma warning restore 612, 618
        }
    }
}
